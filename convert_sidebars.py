#!/usr/bin/env python3

import os
import json
import yaml
import sys

def collect_docs_from_directory(dir_name):
    """
    Recursively collects all .md files from the specified directory.
    """
    docs = []
    dir_path = os.path.join('docs', dir_name)
    if not os.path.exists(dir_path):
        print(f"Warning: Directory '{dir_path}' does not exist.")
        return docs
    
    for root, _, files in os.walk(dir_path):
        for file in sorted(files):
            if file.endswith('.md'):
                file_path = os.path.join(root, file)
                # Generate the doc id relative to 'docs' directory
                doc_id = os.path.relpath(file_path, 'docs').replace('\\', '/')
                # Remove the '.md' extension
                doc_id = doc_id[:-3]
                label = os.path.splitext(os.path.basename(file))[0].replace('-', ' ').title()
                # Build the label path based on subdirectories
                relative_dir = os.path.relpath(root, dir_path).replace('\\', '/')
                if relative_dir != '.':
                    label = f"{relative_dir}/{label}"
                docs.append({label: f"{doc_id}.md"})
    
    return docs

def convert_to_mkdocs_nav(items):
    """
    Converts the Docusaurus sidebar items to MkDocs nav structure with improved formatting.
    """
    nav = []
    if isinstance(items, dict):
        items = [items]
    
    for item in items:
        if isinstance(item, dict):
            item_type = item.get('type', None)
            if item_type == 'category':
                label = item.get('label', 'Untitled')
                sub_items = item.get('items', [])
                sub_nav = convert_to_mkdocs_nav(sub_items)
                if isinstance(sub_nav, list) and len(sub_nav) == 1 and isinstance(sub_nav[0], dict):
                    # If there's only one sub-item and it's a dict, merge it with the current level
                    nav.append({label: list(sub_nav[0].values())[0]})
                else:
                    nav.append({label: sub_nav})
            elif item_type == 'doc':
                doc_id = item.get('id', '')
                label = item.get('label', '')
                if not label:
                    # Use the last part of the id as the label, remove hyphens and capitalize each word
                    label = os.path.basename(doc_id).replace('-', ' ').title()
                else:
                    # Remove hyphens from the provided label and capitalize each word
                    label = label.replace('-', ' ').title()
                doc_path = f"{doc_id}.md"
                nav.append({label: doc_path})
            elif item_type == 'link':
                label = item.get('label', '').replace('-', ' ').title()
                href = item.get('href', '')
                nav.append({label: href})
            elif item_type == 'autogenerated':
                dir_name = item.get('dirName', '')
                docs = collect_docs_from_directory(dir_name)
                if docs:
                    nav_entry = {item.get('label', dir_name): docs}
                    nav.append(nav_entry)
                else:
                    nav.extend(docs)
            else:
                print(f"Warning: Unsupported item type '{item_type}'")
        elif isinstance(item, str):
            doc_path = f"{item}.md"
            label = os.path.basename(item).replace('-', ' ').title()
            nav.append({label: doc_path})
        else:
            print(f"Warning: Unexpected item type: {type(item)}")
    
    return nav

def main():
    sidebars_json_path = 'sidebars.json'
    if not os.path.exists(sidebars_json_path):
        print(f"Error: '{sidebars_json_path}' does not exist. Please run the Node.js script to generate it.")
        sys.exit(1)

    with open(sidebars_json_path, 'r', encoding='utf-8') as f:
        sidebars_data = json.load(f)

    # Access the actual sidebars data
    sidebars = sidebars_data.get('sidebars', {})

    # For this specific case, process 'tutorialSidebar'
    items = sidebars.get('tutorialSidebar', [])
    if not items:
        print("Error: 'tutorialSidebar' not found in sidebars.json.")
        sys.exit(1)

    # Convert the sidebar items to MkDocs nav
    mkdocs_nav = convert_to_mkdocs_nav(items)

    # Append additional links to mkdocs_nav
    additional_links = [
        {"CCX": "https://severalnines.com/ccx/"},
        {"Resources": "https://severalnines.com/resources/"},
        {"Blog": "https://severalnines.com/blog/"},
        {"Podcast": "https://severalnines.com/podcast/"},
        {"Support": "https://support.severalnines.com/hc/en-us"},
        {"About Us": "https://severalnines.com/about-us/"}
    ]
    mkdocs_nav.extend(additional_links)


    # Create the complete mkdocs configuration
    mkdocs_config = {
        'site_name': 'CCX Documentation',
        'site_description': 'Documentation',
        'site_url': '',
        'copyright': 'Copyright &copy; 2014-2024 Severalnines AB. All rights reserved.',
        'copyright_msg': 'Severalnines, ClusterControl, and CCX are registered trademarks in the US, UK, and EU. The 3rd-party trademarks on this site are property of their respective owners and are used for referential purposes only.',
        'theme': {
            'name': 'material',
            'custom_dir': 'docs/overrides',
            'palette': [
                {
                    'media': '(prefers-color-scheme: light)',
                    'scheme': 'percona-light',
                    'primary': 'custom',
                    'accent': 'custom',
                    'toggle': {
                        'icon': 'material/toggle-switch-off-outline',
                        'name': 'Switch to dark mode'
                    }
                },
                {
                    'media': '(prefers-color-scheme: dark)',
                    'scheme': 'slate',
                    'primary': 'custom',
                    'accent': 'custom',
                    'toggle': {
                        'icon': 'material/toggle-switch',
                        'name': 'Switch to light mode'
                    }
                }
            ],
            'features': [
                'search.highlight',
                'navigation.top',
                'content.tabs.link',
                'content.code.copy',
                'navigation.tabs',
                'navigation.tracking',
                'content.action.edit',
                'content.action.view',
                'content.code.copy'
            ],
            'logo': 'assets/ccx.png',
            'favicon': 'assets/favicon.png',
            'font': {
                'text': 'Nunito Sans',
                'code': 'IBM Plex Mono'
            },
        },
        'markdown_extensions': [
            {'codehilite': {'guess_lang': True, 'use_pygments': True}},
            'pymdownx.inlinehilite',
            'pymdownx.snippets',
            'pymdownx.superfences',
            'admonition',
            'pymdownx.details',
            'pymdownx.superfences',
            'pymdownx.tabbed'

        ],
        'nav': mkdocs_nav,
        'mandatory_links': [
            {'Terms of Service': 'https://severalnines.com/ccx/terms/'},
            {'Service Level Agreement': 'https://severalnines.com/ccx/sla/'},
            {'Data Processing Agreement': 'https://severalnines.com/ccx/dpa/'},
            {'Privacy Policy': 'https://severalnines.com/privacy/'}
        ],
        'cookie_link_title': 'Cookies Settings',
        'extra_css': ['stylesheets/extra.css'],
        'extra_javascript': ['javascripts/extra.js'],
        'extra': {
            'social': [
                {'icon': 'fontawesome/brands/linkedin-in', 'link': 'https://www.linkedin.com/company/severalnines/'},
                {'icon': 'fontawesome/brands/x-twitter', 'link': 'https://twitter.com/severalnines/'},
                {'icon': 'fontawesome/brands/facebook-f', 'link': 'https://www.facebook.com/severalnines/'},
                {'icon': 'fontawesome/brands/youtube', 'link': 'https://www.youtube.com/c/Severalnines/'}
            ]
        },
    }

    # Custom YAML dumper to preserve indentation and format lists
    class IndentDumper(yaml.Dumper):
        def increase_indent(self, flow=False, indentless=False):
            return super(IndentDumper, self).increase_indent(flow, False)

        def represent_list(self, data):
            return self.represent_sequence('tag:yaml.org,2002:seq', data, flow_style=False)

    # Output the complete configuration in YAML format
    mkdocs_yaml = yaml.dump(mkdocs_config, Dumper=IndentDumper, sort_keys=False, allow_unicode=True, width=float("inf"))
    
    # Add comments to the YAML output
    mkdocs_yaml = mkdocs_yaml.replace(
        "palette:", 
        "palette:\n    # Light mode"
    ).replace(
        "- media: '(prefers-color-scheme: dark)'", 
        "    # Dark mode\n    - media: '(prefers-color-scheme: dark)'"
    )
    
    print(mkdocs_yaml)

if __name__ == '__main__':
    main()

